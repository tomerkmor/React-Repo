{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialCounterState,\n  reducers: {\n    // here we can work as usual, and the code will not manipulate the existing state\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    reset(state) {\n      state.counter = 0;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: {\n    authentication: false\n  },\n  reducers: {}\n});\n\n//global approach(for lots of reducers)\nconst store = configureStore({\n  reducer: {\n    // map of different reducers\n    // configureStore will merge all those reducers into one big reducer\n    counter: counterSlice.reducer\n  }\n});\n\n//connect the react-app to the redux-store\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","reset","toggleCounter","authSlice","authentication","store","reducer","counterActions","actions"],"sources":["C:/Users/sexyl/OneDrive/Desktop/A/udemy-react/udemy-final projects/11 - Redux basics/src/store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true};\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducers: {\r\n    // here we can work as usual, and the code will not manipulate the existing state\r\n    increment(state) {\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload;\r\n    },\r\n    reset(state) {\r\n      state.counter = 0;\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\n\r\nconst authSlice = createSlice({\r\n  name: 'authentication',\r\n  initialState: {authentication: false},\r\n  reducers: {\r\n\r\n  }\r\n})\r\n\r\n//global approach(for lots of reducers)\r\nconst store = configureStore({\r\n  reducer: {\r\n    // map of different reducers\r\n    // configureStore will merge all those reducers into one big reducer\r\n    counter: counterSlice.reducer,\r\n  },\r\n});\r\n\r\n//connect the react-app to the redux-store\r\nexport const counterActions = counterSlice.actions;\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAI,CAAC;AAE5D,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACR;IACAC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACP,OAAO,EAAE;IACjB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAChD,CAAC;IACDC,KAAKA,CAACL,KAAK,EAAE;MACXA,KAAK,CAACP,OAAO,GAAG,CAAC;IACnB,CAAC;IACDa,aAAaA,CAACN,KAAK,EAAE;MACnBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAGF,MAAMa,SAAS,GAAGjB,WAAW,CAAC;EAC5BM,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAE;IAACW,cAAc,EAAE;EAAK,CAAC;EACrCV,QAAQ,EAAE,CAEV;AACF,CAAC,CAAC;;AAEF;AACA,MAAMW,KAAK,GAAGlB,cAAc,CAAC;EAC3BmB,OAAO,EAAE;IACP;IACA;IACAjB,OAAO,EAAEE,YAAY,CAACe;EACxB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,cAAc,GAAGhB,YAAY,CAACiB,OAAO;AAClD,eAAeH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}